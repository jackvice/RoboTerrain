#!/usr/bin/env python3

import argparse
from pathlib import Path
from typing import List, Dict, Any
import sys
import logging

from data_loader import MetricsDataLoader
from statistics import MetricsStatistics
from visualizations.time_series import TimeSeriesVisualizer

class MetricsAnalyzerCLI:
    """Command line interface for the metrics analyzer."""
    
    VALID_METRICS = {
        'SR': 'Success Rate (%)',
        'TC': 'Total Collisions (#)',
        'MTT': 'Mean Time to Traverse (s)',
        'TR': 'Traverse Rate (%)',
        'TSR': 'Total Smoothness of Route (m)',
        'OC': 'Obstacle Clearance (%)',
        'VOR': 'Velocity Over Rough Terrain (m/s)'
    }
    
    VALID_PLOT_TYPES = [
        'time_series',
        'correlation',
        'aggregate',
        'comparison'
    ]
    
    VALID_TIME_NORMS = [
        'percentage',
        'fixed_interval',
        'none'
    ]

    def __init__(self):
        """Initialize the CLI parser and logging."""
        self.parser = argparse.ArgumentParser(
            description='Analyze and visualize navigation metrics from CSV files.',
            formatter_class=argparse.RawDescriptionHelpFormatter
        )
        self._setup_arguments()
        self._setup_logging()
        
    def _setup_logging(self):
        """Set up logging configuration."""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)

    def _setup_arguments(self):
        """Set up command line arguments."""
        # Required arguments
        self.parser.add_argument(
            'csv_files',
            type=Path,
            nargs='+',
            help='One or more CSV files containing metrics data'
        )
        
        # Optional arguments
        self.parser.add_argument(
            '-m', '--metrics',
            choices=list(self.VALID_METRICS.keys()),
            nargs='+',
            default=list(self.VALID_METRICS.keys()),
            help='Metrics to analyze (default: all)'
        )
        
        self.parser.add_argument(
            '-p', '--plot-types',
            choices=self.VALID_PLOT_TYPES,
            nargs='+',
            default=['time_series'],
            help='Types of plots to generate (default: time_series)'
        )
        
        self.parser.add_argument(
            '-o', '--output-dir',
            type=Path,
            default=Path('output'),
            help='Output directory for plots and analysis (default: ./output)'
        )
        
        self.parser.add_argument(
            '-n', '--normalize',
            choices=self.VALID_TIME_NORMS,
            default='percentage',
            help='Time normalization method (default: percentage)'
        )
        
        self.parser.add_argument(
            '--iqr-multiplier',
            type=float,
            default=1.5,
            help='IQR multiplier for outlier detection (default: 1.5)'
        )
        
        self.parser.add_argument(
            '--save-outliers',
            action='store_true',
            help='Save removed outliers to a separate file'
        )
        
        self.parser.add_argument(
            '--confidence-level',
            type=float,
            default=0.95,
            help='Confidence level for statistical analysis (default: 0.95)'
        )
        
        self.parser.add_argument(
            '--fixed-interval',
            type=float,
            default=1.0,
            help='Interval (seconds) for fixed-interval normalization (default: 1.0)'
        )

    def process_data(self, args: Dict[str, Any]) -> None:
        """
        Process data and generate visualizations.
        
        Args:
            args (Dict[str, Any]): Parsed command line arguments
        """
        self.logger.info("Starting data processing...")
        
        # Initialize components
        data_loader = MetricsDataLoader(iqr_multiplier=args['iqr_multiplier'])
        statistics = MetricsStatistics(confidence_level=args['confidence_level'])
        time_series_viz = TimeSeriesVisualizer()
        
        # Process each input file
        for csv_file in args['csv_files']:
            self.logger.info(f"Processing file: {csv_file}")
            
            # Load and process data
            processed_data = data_loader.process_data(
                csv_file,
                args['metrics'],
                args['normalize'],
                args['fixed_interval'],
                args['save_outliers'],
                args['output_dir']
            )
            
            # Perform statistical analysis
            stats_results = statistics.analyze_trial(
                processed_data['normalized'],
                args['metrics']
            )
            
            # Generate visualizations
            if 'time_series' in args['plot_types']:
                self.logger.info("Generating time series plots...")
                figures = {}
                
                for metric in args['metrics']:
                    self.logger.info(f"Plotting metric: {metric}")
                    # Basic time series
                    fig = time_series_viz.plot_metric_time_series(
                        processed_data['normalized'],
                        metric,
                        title=f"{metric} Time Series"
                    )
                    figures[f"{metric}_time_series"] = fig
                    
                    # Time series with statistics
                    fig = time_series_viz.plot_metric_with_statistics(
                        processed_data['normalized'],
                        metric,
                        stats_results[metric]['rolling_stats'],
                        title=f"{metric} with Statistics"
                    )
                    figures[f"{metric}_with_stats"] = fig
                
                # Save plots
                output_path = args['output_dir'] / csv_file.stem
                time_series_viz.save_plots(figures, output_path)
                self.logger.info(f"Plots saved to: {output_path}")

def main():
    """Main entry point for the CLI."""
    cli = MetricsAnalyzerCLI()
    args = cli.parse_args()
    cli.process_data(args)

if __name__ == '__main__':
    main()
