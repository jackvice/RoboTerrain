import os
import subprocess

from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, ExecuteProcess, SetEnvironmentVariable, OpaqueFunction
from launch.substitutions import LaunchConfiguration, PathJoinSubstitution
from launch_ros.actions import Node
from launch_ros.substitutions import FindPackageShare


def convert_xacro_to_sdf(context, *args, **kwargs):
    leo_desc_pkg = get_package_share_directory('leo_description')
    xacro_file = os.path.join(leo_desc_pkg, 'urdf', 'leo_sim.urdf.xacro')
    urdf_file = '/tmp/leo_sim.urdf'
    sdf_file = '/tmp/leo_sim_converted.sdf'

    print(f"[INFO] Converting xacro: {xacro_file}")
    subprocess.run(['xacro', xacro_file, '-o', urdf_file], check=True)

    print(f"[INFO] Converting URDF to SDF: {urdf_file}")
    subprocess.run(['ign', 'sdf', '-p', urdf_file], check=True, stdout=open(sdf_file, 'w'))

    return []

def generate_launch_description():
    use_sim_time = LaunchConfiguration('use_sim_time')
    world = LaunchConfiguration('world')

    declare_use_sim_time = DeclareLaunchArgument(
        'use_sim_time', default_value='true', description='Use /clock if true')

    declare_world = DeclareLaunchArgument(
        'world', default_value='maze_empty.sdf', description='World file to load')

    world_path = PathJoinSubstitution([
        FindPackageShare('roverrobotics_gazebo'),
        'worlds',
        world
    ])

    pkg_share = get_package_share_directory('roverrobotics_gazebo')
    pkg_source = os.path.join(
        os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(pkg_share)))),
        'src/roverrobotics_ros2/roverrobotics_gazebo'
    )

    resource_env = SetEnvironmentVariable(
        name='IGN_GAZEBO_RESOURCE_PATH',
        value=':'.join([
            os.path.join(
                os.path.expanduser('~'),
                'worlds/gazebo_models_worlds_collection/models/cpr_office_construction'),
            pkg_source,
            os.path.dirname(pkg_source)
        ])
    )

    model_env = SetEnvironmentVariable(
        name='IGN_GAZEBO_MODEL_PATH',
        value=pkg_source
    )

    path_env = SetEnvironmentVariable('PATH', os.environ['PATH'])

    gz_sim = ExecuteProcess(
        cmd=['ign', 'gazebo', world_path],
        output='screen'
    )

    gz_spawn_entity = Node(
        package='ros_gz_sim',
        executable='create',
        arguments=[
            '-file', os.path.join(get_package_share_directory('leo_description'), 'sdf', 'leo_sim.sdf'),
            '-name', 'leo_rover',
            '-x', '0', '-y', '0', '-z', '1.0'
        ],
        output='screen'
    )

    gz_ros2_bridge = Node(
        package='ros_gz_bridge',
        executable='parameter_bridge',
        arguments=[
            '/cmd_vel@geometry_msgs/msg/Twist@ignition.msgs.Twist',
            '/clock@rosgraph_msgs/msg/Clock[ignition.msgs.Clock',
            '/odometry/wheels@nav_msgs/msg/Odometry@ignition.msgs.Odometry',
            '/tf@tf2_msgs/msg/TFMessage[ignition.msgs.Pose_V',
            '/joint_states@sensor_msgs/msg/JointState[gz.msgs.Model',
            '/scan@sensor_msgs/msg/LaserScan@gz.msgs.LaserScan',
            '/imu/data@sensor_msgs/msg/Imu@gz.msgs.IMU',
            '/camera/image_raw@sensor_msgs/msg/Image@gz.msgs.Image',
            '/camera_info@sensor_msgs/msg/CameraInfo@gz.msgs.CameraInfo',
            '/world/default/dynamic_pose/info@geometry_msgs/msg/PoseArray[ignition.msgs.Pose_V',
        ],
        output='screen'
    )

    return LaunchDescription([
        declare_use_sim_time,
        declare_world,
        path_env,
        resource_env,
        model_env,
        gz_sim,
        gz_spawn_entity,
        gz_ros2_bridge,
    ])


